<?php
/*Int 可以使用十进制，十六进制，八进制或二进制表示，前面可以加上可选的符号（- 或者 +）。 可以用负运算符 来表示一个负的 int。

要使用八进制表达，数字前必须加上 0（零）。 PHP 8.1.0 起，八进制表达也可以在前面加上 0o 或者 0O 。
要使用十六进制表达，数字前必须加上 0x。要使用二进制表达，数字前必须加上 0b。

从 PHP 7.4.0 开始，整型数值可能会包含下划线 (_)，为了更好的阅读体验，这些下划线在展示的时候，会被 PHP 过滤掉。*/
$a=1234;//十进制数
echo "$a</br>";
$a=0123;//八进制数（等于十进制83）
echo "$a</br>";
$a=0o123;//八进制数（PHP8.1.0起）
echo "$a</br>";
$a=0x1A;//十六进制数（等于十进制26）
echo "$a</br>";
$a=0b11111111;//二进制数（等于十进制255）
echo "$a</br>";
$a=1_234_567;//整型数值（PHP7.4.0以后）
echo "$a</br>";

//整型溢出
//如果给定的一个数超出了 int 的范围，将会被解释为 float。同样如果执行的运算结果超出了 int 范围，也会返回 float。
$large_number=5000000000000000000000;
var_dump($large_number);
var_dump(PHP_INT_MAX+1);

//PHP 没有 int 除法取整运算符，要使用 intdiv() 实现。 1/2 产生出 float 0.5。
// 值可以舍弃小数部分，强制转换为 int，或者使用 round() 函数可以更好地进行四舍五入。
var_dump(25/7);
var_dump((int)25/7);
var_dump(round(25/7));
//要明确地将一个值转换为 int，用 (int) 或 (integer) 强制转换。不过大多数情况下都不需要强制转换，因为当运算符，
//函数或流程控制需要一个 int 参数时，值会自动转换。还可以通过函数 intval() 来将一个值转换成 int 整型。
//将 resource 转换成 int 时， 结果会是 PHP 运行时为 resource 分配的唯一资源号。
//false 将产生出 0（零），true 将产生出 1（壹）。
